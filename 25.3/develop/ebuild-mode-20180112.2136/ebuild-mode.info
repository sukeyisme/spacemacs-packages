This is ebuild-mode.info, produced by makeinfo version 6.5 from
ebuild-mode.texi.

This manual is for ebuild-mode, which is a major mode for ebuild and
eclass files.

   Copyright © 2009-2018 Gentoo Foundation

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU General Public License, version
     2 or any later version published by the Free Software Foundation.
INFO-DIR-SECTION Gentoo
INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* ebuild-mode: (ebuild-mode).   Major mode for ebuild and eclass files.
END-INFO-DIR-ENTRY


File: ebuild-mode.info,  Node: Top,  Next: Commands,  Up: (dir)

ebuild-mode: An introduction
****************************

This collection of modes will help the user to efficiently write and
edit ebuilds and eclasses which are special to Gentoo, a
meta-distribution with various targets (Linux distribution, prefixed
environments in other operating systems, and integration of other
kernels and userlands like the BSDs).

   Ebuilds describe the build process and dependencies of a software
package to automatically compile and install it under the control of a
package manager.  They are simple text files, based on Bash shell
scripts and there easy to create.  Eclasses are comparable to a library
which provides generic functions that a set of ebuilds can use by
sourcing it on request.

   ebuild-mode provides a major mode to edit the above two file types.
Other features are the execution of often needed commands (like KEYWORDS
manipulation) or fast-track creation of new ebuilds by skeleton support.

* Menu:

* Commands:: What ebuild-mode provides.
* ebuild-mode:: Editing ebuilds.
* eclass-mode:: Editing eclasses.
* gentoo-newsitem-mode:: Editing GLEP 42 news items.
* glep-mode:: Editing Gentoo Linux Enhancement Proposals.


File: ebuild-mode.info,  Node: Commands,  Next: ebuild-mode,  Prev: Top,  Up: Top

1 Available functionality
*************************

Two packages are available for installation: ‘app-emacs/ebuild-mode’ and
‘app-xemacs/ebuild-mode’ (there is support for GNU Emacs and XEmacs from
the same source).  When installed through the normal package management
in Gentoo and proper configuration of Emacs, ebuild-mode loads the
appropriate mode on opening files with the extensions ‘.ebuild’ and
‘.eclass’.  As the ebuild format is based on the Bash syntax, sh-mode is
called as a base, where ebuild specific things are added/changed on top.

   If font-locking is enabled, keywords are highlighted, both the
standard set defined by the package manager and special functions from
all common eclasses.  Missing highlighting should be reported on
‘https://bugs.gentoo.org/’.

   Generally all functionality is reachable through direct commands,
keybindings (described later) and menu entries, if the latter is
activated.  So every user has the choice for his/her preferred way of
interfacing with Emacs.


File: ebuild-mode.info,  Node: ebuild-mode,  Next: eclass-mode,  Prev: Commands,  Up: Top

2 ebuild-mode
*************

2.1 Writing a new ebuild
========================

Starting a completely new ebuild from scratch is best done by inserting
an ebuild skeleton.  The command ‘ebuild-mode-skeleton’ does this for
you and can be called via ‘C-c C-n’.  You are prompted for the always
needed information, while having the possibility to give more than one
item (in LICENSE for example) and choose via tab completion from the
possible choices.  Giving an empty input on items, that are not
mandatory, will remove it from the buffer.  After that adding custom
modifications is simple and straightforward.

2.2 Keywording
==============

In ebuild-mode an interface to manipulation of the KEYWORDS variable is
provided in two different ways:
  1. Prompt for actions with tab completion or
  2. ekeyword syntax.

   The first command is called ‘ebuild-mode-keyword’ (bound to ‘C-c
C-k’) and initially asks for the action to take which is one out of
‘drop’
     Remove the architecture entirely.
‘mask’
     State with a prefixed minus sign that the architecture is
     definitely not supported.
‘stable’
     Mark as stable.
‘unstable’
     Mark as testing.

   After choosing the action the architectures to handle need to be
chosen.  Tab completion is available for all possible architectures.

   Using the ekeyword syntax for the ‘ebuild-mode-ekeyword’ command
(‘C-c C-y’ as keybinding) is equal what you can pass as argument to said
utility from the ‘app-portage/gentoolkit-dev’ package:
‘^<arch>’
     Remove the architecture entirely.
‘-<arch>’
     State with a prefixed minus sign that the architecture is
     definitely not supported.
‘<arch>’
     Mark as stable.
‘~<arch>’
     Mark as testing.
   It is possible to use ‘all’ instead of an individual architecture
which works on all currently available architectures for the ebuild.

   Handy for version/revision bumps is to mark all architectures from a
copied stable ebuild as testing.  The keybinding ‘C-c C-b’ calling the
‘ebuild-mode-all-keywords-unstable’ command can be used for this task.

2.3 Testing and interfacing with Portage
========================================

Apart from the normal external program calls via ‘M-!’, ebuild-mode
provides a direct interface to the ebuild utility found in the Portage
program suite.  ‘C-c C-e’ calls ‘ebuild-run-command’ which asks for one
of the possible actions as argument.  See the man page of ebuild what
actions are provided.

2.4 Keybindings
===============

‘C-c C-n’
     Insert a skeleton ebuild contents, with prompts for desired eclass
     inclusions, licenses and USE flags.
‘C-c C-k’
     Keywording is done via prompts that narrows down your choices which
     architectures to mark as testing, dropped among other things.
‘C-c C-y’
     Generate architecture keywords with the syntax from the ekeyword
     tool.
‘C-c C-b’
     Mark all architectures as testing.  Handy for version/revision
     bumps.
‘C-c C-e’
     Run Portage’s ebuild command, you are prompted for the phase you
     want.
‘C-c C-a’
     Create a ChangeLog entry.


File: ebuild-mode.info,  Node: eclass-mode,  Next: gentoo-newsitem-mode,  Prev: ebuild-mode,  Up: Top

3 eclass-mode
*************

There is no special eclass-mode but ebuild-mode is used without the
commands that make no sense in eclasses.


File: ebuild-mode.info,  Node: gentoo-newsitem-mode,  Next: glep-mode,  Prev: eclass-mode,  Up: Top

4 gentoo-newsitem-mode for GLEP 42 news items
*********************************************

This mode supports the highlighting of relevant keywords for GLEP 42
news items.  These news items get displayed if special criteria for
installed packages or profiles are met on the user’s system.  Special
upgrade instructions or other important news are then brought to the
notice of the user through the package manager.  As it is a seldom task
for a developer to write a news item, some assistance is surely welcome
when doing so, but GLEP 42 stays the reference for the whole process.

   It gets automatically loaded when a file name matches the criteria of
GLEP 42 (see there for details), but can also be invoked through the
‘gentoo-newsitem-mode’ function.  The only available keybinding is ‘C-c
C-n’ which starts a skeleton assistant similar to the one available in
‘ebuild-mode’.  All mandatory information are asked from the user so no
item is forgotten.


File: ebuild-mode.info,  Node: glep-mode,  Prev: gentoo-newsitem-mode,  Up: Top

5 glep-mode for Gentoo Linux Enhancement Proposals
**************************************************

This major mode supports editing of Gentoo Linux Enhancement Proposals.
Because GLEPs are written in reStructuredText, this mode is derived from
‘rst-mode’ and inherits its syntax highlighting and editing functions.
Furthermore, highlighting of known keywords in the GLEP’s preamble is
supported.  A skeleton for a new GLEP can be inserted via the
‘glep-mode-insert-skeleton’ function bound to ‘C-c C-n’.  It will
automatically fill some metadata, like creation date and author’s name,
and query the user for other fields.

   Currently ‘glep-mode’ works with GNU Emacs only, because the
underlying ‘rst-mode’ does not support XEmacs.



Tag Table:
Node: Top582
Node: Commands1823
Node: ebuild-mode2941
Node: eclass-mode6217
Node: gentoo-newsitem-mode6461
Node: glep-mode7539

End Tag Table


Local Variables:
coding: utf-8
End:
